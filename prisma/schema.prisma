// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  name     String?
  password String
  role     UserRole @default(USER)

  examTemplates ExamTemplate[]
  question      Question[]
}

model QuestionOption {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String
}

model Question {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String @map("author_id") @db.ObjectId
  enunciation String

  author       User                   @relation(fields: [authorId], references: [id])
  attachment   QuestionAttachment[]
  examTemplate ExamTemplateQuestion[]
}

model ExamTemplateQuestion {
  id             String @id @map("_id") @db.ObjectId
  questionId     String @map("question_id") @db.ObjectId
  examTemplateId String @map("exam_template_id") @db.ObjectId

  question     Question     @relation(fields: [questionId], references: [id])
  examTemplate ExamTemplate @relation(fields: [examTemplateId], references: [id])
}

enum ExamTemplateStatus {
  SKETCHED
  CREATED
  PUBLISHED
  ARCHIVED
}

model ExamTemplate {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  authorId  String?            @map("author_id") @db.ObjectId
  status    ExamTemplateStatus @default(CREATED)
  createdAt DateTime           @map("created_at")
  updatedAt DateTime           @map("updated_at")

  author    User?                  @relation(fields: [authorId], references: [id])
  questions ExamTemplateQuestion[]
}

model QuestionAttachment {
  id           String @id @map("_id")
  questionId   String @map("question_id") @db.ObjectId
  attachmentId String @map("attachment_id")

  attachment Attachment @relation(fields: [attachmentId], references: [id])
  question   Question   @relation(fields: [questionId], references: [id])
}

model Attachment {
  id    String @id @map("_id")
  title String
  url   String

  questionAttachment QuestionAttachment[]
}
